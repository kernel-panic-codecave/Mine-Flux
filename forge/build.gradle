plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "com.matthewprenger.cursegradle"
}
architectury {
    platformSetupLoomIde()
    forge()
}

loom {
    forge {
        mixinConfig "mine_flux-common.mixins.json"
        mixinConfig "mine_flux.mixins.json"
        dataGen {
            mod "mine_flux"
        }
    }
    launches {
        data {
            arg "--existing", file("../common/src/main/resources").absolutePath
        }
    }
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin because we don't want IDEA to index this.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.forge_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-forge:${rootProject.architectury_version}"

    modRuntimeOnly "curse.maven:op-245211:3606616"
    modRuntimeOnly "curse.maven:ie-231951:3587149"
    modRuntimeOnly "curse.maven:ch-290433:3597302"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive = false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "fabric.mod.json"

    configurations = [project.configurations.shadowCommon]
    classifier "dev-shadow"
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier null
}

jar {
    classifier "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenForge(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/withertech/mine-flux")
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }
}

curseforge {
    if (System.getenv("CURSE_API_KEY") != null) {
        apiKey = System.getenv("CURSE_API_KEY")
        project {
            id = "570667"
            releaseType = "$rootProject.cf_type"
            changelogType = "html"
            changelog = releaseChangelog()
            addGameVersion "1.18.1"
            addGameVersion "1.18"
            addGameVersion "1.18-Snapshot"
            addGameVersion "Java 17"
            addGameVersion "Forge"
            relations {
                requiredDependency "architectury-forge"
            }
            mainArtifact(remapJar.archivePath) {
                displayName = "[Forge $rootProject.minecraft_version] v$project.version"
            }
            afterEvaluate {
                uploadTask.dependsOn("build")
            }
        }
        options {
            forgeGradleIntegration = false
            javaVersionAutoDetect = false
        }
    }
}
rootProject.tasks.getByName("curseforgePublish").dependsOn tasks.getByName("curseforge")